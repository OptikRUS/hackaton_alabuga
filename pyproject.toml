[project]
name = "hackaton-alabuga"
version = "0.1.0"
description = "Add your description here"
requires-python = ">=3.13"
dependencies = [
    "alembic>=1.16.5",
    "asyncpg>=0.30.0",
    "bcrypt>=4.3.0",
    "dishka>=1.7.1",
    "fastapi[standard]>=0.116.2",
    "pydantic-settings>=2.10.1",
    "pyjwt>=2.10.1",
    "sqlalchemy[asyncio]>=2.0.43",
    "aioboto3>=13.1.1",
    "structlog>=25.4.0",
    "orjson>=3.11.3",
]

[dependency-groups]
dev = [
    "mypy>=1.18.2",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "pytest-httpx>=0.35.0",
    "ruff>=0.13.1",
]

[tool.pytest.ini_options]
pythonpath = ["."]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.report]
omit = ["src/migrations/*", "src/tests/*", "src/main.py", "*/__dishka_factory_*"]
exclude_lines = ["raise AssertionError", "raise NotImplementedError"]

[tool.mypy]
mypy_path = ["."]
plugins = ["pydantic.mypy"]
follow_imports = "silent"
strict = true
disallow_subclassing_any = false
disallow_any_generics = false
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["src.migrations.*"]
ignore_errors = true

[[tool.mypy.overrides]]
module = ["src.tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_calls = false
disallow_untyped_decorators = false

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.ruff]
target-version = "py313"
src = ["src"]
exclude = [".venv"]
line-length = 100
show-fixes = true
output-format = "concise"

[tool.ruff.format]
preview = true
line-ending = "auto"
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

[tool.ruff.lint]
ignore = ["D", "RUF001", "RUF012", "FIX", "TD002", "TD003", "COM812"]
select = ["ALL"]
unfixable = ["E711", "E712"]

[tool.ruff.lint.per-file-ignores]
"src/migrations/*" = ["INP001"]
"src/tests/*" = ["S101", "S106", "FBT", "ARG002", "PT004", "ANN201", "PLR2004"]
"src/tests/helpers/*.py" = ["PLR0913"]
"src/tests/conftest.py" = ["ARG001"]
"src/api/boundary.py" = ["ARG002", "ANN003", "A003", "ANN401"]

[tool.ruff.lint.pylint]
max-args = 6

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id", "type"]

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["pydantic.model_validator", "pydantic.field_validator"]
