#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π —Ç–µ–º–∞—Ç–∏–∫–æ–π.
–°–æ–∑–¥–∞–µ—Ç —Ä–∞–Ω–≥–∏, –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏, –Ω–∞–≤—ã–∫–∏, –º–∏—Å—Å–∏–∏, –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ.
"""

import asyncio
from datetime import datetime, timedelta
from pathlib import Path

from sqlalchemy import text
from sqlalchemy.ext.asyncio import AsyncSession

from src.config.settings import settings
from src.services.user_password_service import UserPasswordService
from src.storages.database import async_session
from src.storages.models import (
    ArtifactModel,
    CompetencyModel,
    MissionBranchModel,
    MissionCompetencyRewardModel,
    MissionModel,
    MissionSkillRewardModel,
    MissionTaskModel,
    RankModel,
    SkillModel,
    StoreItemModel,
    UserModel,
)
from src.core.users.enums import UserRoleEnum
from src.core.artifacts.enums import ArtifactRarityEnum
from src.core.missions.enums import MissionCategoryEnum


class SpaceSeedData:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.session: AsyncSession | None = None
    
    async def create_session(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.session = async_session()
    
    async def close_session(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if self.session:
            await self.session.close()
    
    async def seed_ranks(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Ä–∞–Ω–≥–∏"""
        print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Ä–∞–Ω–≥–æ–≤...")
        
        ranks_data = [
            {"name": "–ö–∞–¥–µ—Ç", "required_xp": 0},
            {"name": "–†—è–¥–æ–≤–æ–π –∫–æ—Å–º–æ–Ω–∞–≤—Ç", "required_xp": 100},
            {"name": "–ú–ª–∞–¥—à–∏–π –æ—Ñ–∏—Ü–µ—Ä", "required_xp": 300},
            {"name": "–û—Ñ–∏—Ü–µ—Ä", "required_xp": 600},
            {"name": "–°—Ç–∞—Ä—à–∏–π –æ—Ñ–∏—Ü–µ—Ä", "required_xp": 1000},
            {"name": "–ö–∞–ø–∏—Ç–∞–Ω", "required_xp": 1500},
            {"name": "–ö–æ–º–∞–Ω–¥–∏—Ä —ç—Å–∫–∞–¥—Ä–∏–ª—å–∏", "required_xp": 2200},
            {"name": "–ö–æ–º–∞–Ω–¥–∏—Ä —Ñ–ª–æ—Ç–∞", "required_xp": 3000},
            {"name": "–ê–¥–º–∏—Ä–∞–ª", "required_xp": 4000},
            {"name": "–ì–ª–∞–≤–Ω–æ–∫–æ–º–∞–Ω–¥—É—é—â–∏–π", "required_xp": 5000},
        ]
        
        created_count = 0
        for rank_data in ranks_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ä–∞–Ω–≥
            existing_rank = await self.session.execute(
                text("SELECT id FROM ranks_rank WHERE name = :name"),
                {"name": rank_data["name"]}
            )
            if existing_rank.fetchone() is None:
                rank = RankModel(
                    name=rank_data["name"],
                    required_xp=rank_data["required_xp"]
                )
                self.session.add(rank)
                created_count += 1
        
        await self.session.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_count} –Ω–æ–≤—ã—Ö —Ä–∞–Ω–≥–æ–≤")
    
    async def seed_competencies(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏"""
        print("üåå –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π...")
        
        competencies_data = [
            {"name": "–ü–∏–ª–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "max_level": 10},
            {"name": "–ù–∞–≤–∏–≥–∞—Ü–∏—è", "max_level": 10},
            {"name": "–ò–Ω–∂–µ–Ω–µ—Ä–∏—è", "max_level": 10},
            {"name": "–ë–æ–µ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã", "max_level": 10},
            {"name": "–î–∏–ø–ª–æ–º–∞—Ç–∏—è", "max_level": 10},
            {"name": "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "max_level": 10},
            {"name": "–¢–æ—Ä–≥–æ–≤–ª—è", "max_level": 10},
            {"name": "–í—ã–∂–∏–≤–∞–Ω–∏–µ", "max_level": 10},
        ]
        
        created_count = 0
        for comp_data in competencies_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è
            existing_comp = await self.session.execute(
                text("SELECT id FROM competencies_competency WHERE name = :name"),
                {"name": comp_data["name"]}
            )
            if existing_comp.fetchone() is None:
                competency = CompetencyModel(
                    name=comp_data["name"],
                    max_level=comp_data["max_level"]
                )
                self.session.add(competency)
                created_count += 1
        
        await self.session.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_count} –Ω–æ–≤—ã—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π")
    
    async def seed_skills(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏"""
        print("‚≠ê –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤...")
        
        skills_data = [
            # –ü–∏–ª–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            {"name": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–º", "max_level": 5},
            {"name": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–π—Å–µ—Ä–æ–º", "max_level": 5},
            {"name": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—Ä–µ–¥–Ω–æ—É—Ç–æ–º", "max_level": 5},
            {"name": "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ –º–∞–Ω–µ–≤—Ä—ã", "max_level": 5},
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è
            {"name": "–ì–∏–ø–µ—Ä–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä—ã–∂–∫–∏", "max_level": 5},
            {"name": "–ö–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—è", "max_level": 5},
            {"name": "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è", "max_level": 5},
            {"name": "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤", "max_level": 5},
            
            # –ò–Ω–∂–µ–Ω–µ—Ä–∏—è
            {"name": "–†–µ–º–æ–Ω—Ç –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π", "max_level": 5},
            {"name": "–°–∏—Å—Ç–µ–º—ã –∂–∏–∑–Ω–µ–æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è", "max_level": 5},
            {"name": "–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã", "max_level": 5},
            {"name": "–ö–∏–±–µ—Ä–Ω–µ—Ç–∏–∫–∞", "max_level": 5},
            
            # –ë–æ–µ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã
            {"name": "–õ–∞–∑–µ—Ä–Ω–æ–µ –æ—Ä—É–∂–∏–µ", "max_level": 5},
            {"name": "–ü–ª–∞–∑–º–µ–Ω–Ω—ã–µ –ø—É—à–∫–∏", "max_level": 5},
            {"name": "–†–∞–∫–µ—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã", "max_level": 5},
            {"name": "–©–∏—Ç—ã", "max_level": 5},
            
            # –î–∏–ø–ª–æ–º–∞—Ç–∏—è
            {"name": "–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã", "max_level": 5},
            {"name": "–ú–µ–∂–≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", "max_level": 5},
            {"name": "–ö—É–ª—å—Ç—É—Ä–æ–ª–æ–≥–∏—è", "max_level": 5},
            {"name": "–õ–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞", "max_level": 5},
            
            # –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            {"name": "–ê—Å—Ç—Ä–æ–±–∏–æ–ª–æ–≥–∏—è", "max_level": 5},
            {"name": "–ê—Ä—Ö–µ–æ–ª–æ–≥–∏—è", "max_level": 5},
            {"name": "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "max_level": 5},
            {"name": "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "max_level": 5},
            
            # –¢–æ—Ä–≥–æ–≤–ª—è
            {"name": "–ú–µ–∂–≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", "max_level": 5},
            {"name": "–õ–æ–≥–∏—Å—Ç–∏–∫–∞", "max_level": 5},
            {"name": "–≠–∫–æ–Ω–æ–º–∏–∫–∞", "max_level": 5},
            {"name": "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "max_level": 5},
            
            # –í—ã–∂–∏–≤–∞–Ω–∏–µ
            {"name": "–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –º–µ–¥–∏—Ü–∏–Ω–∞", "max_level": 5},
            {"name": "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è", "max_level": 5},
            {"name": "–°–∞–º–æ–∑–∞—â–∏—Ç–∞", "max_level": 5},
            {"name": "–†–µ—Å—É—Ä—Å–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–µ", "max_level": 5},
        ]
        
        created_count = 0
        for skill_data in skills_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –Ω–∞–≤—ã–∫
            existing_skill = await self.session.execute(
                text("SELECT id FROM skills_skill WHERE name = :name"),
                {"name": skill_data["name"]}
            )
            if existing_skill.fetchone() is None:
                skill = SkillModel(
                    name=skill_data["name"],
                    max_level=skill_data["max_level"]
                )
                self.session.add(skill)
                created_count += 1
        
        await self.session.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_count} –Ω–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤")
    
    async def seed_artifacts(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã"""
        print("üíé –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤...")
        
        artifacts_data = [
            # –û–±—ã—á–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
            {"title": "–ö—Ä–∏—Å—Ç–∞–ª–ª —ç–Ω–µ—Ä–≥–∏–∏", "description": "–ú–æ—â–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –∫–æ—Ä–∞–±–ª—è", "rarity": "common", "image_url": "/images/crystal_energy.jpg"},
            {"title": "–ê–Ω—Ç–∏–≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä", "description": "–ü–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ—Ä–∞–±–ª—é –ª–µ—Ç–∞—Ç—å –±–µ–∑ —Ç–æ–ø–ª–∏–≤–∞", "rarity": "common", "image_url": "/images/antigrav_generator.jpg"},
            {"title": "–ì–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç–æ—Ä", "description": "–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –≥–æ–ª–æ–≥—Ä–∞–º–º—ã", "rarity": "common", "image_url": "/images/holo_projector.jpg"},
            
            # –†–µ–¥–∫–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
            {"title": "–ö–≤–∞–Ω—Ç–æ–≤—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä", "description": "–°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π", "rarity": "rare", "image_url": "/images/quantum_computer.jpg"},
            {"title": "–¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –º–æ–¥—É–ª—å", "description": "–ü–æ–∑–≤–æ–ª—è–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è", "rarity": "rare", "image_url": "/images/teleport_module.jpg"},
            {"title": "–í—Ä–µ–º–µ–Ω–Ω–æ–π –º–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä", "description": "–ú–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª—è—Ç—å –∏–ª–∏ —É—Å–∫–æ—Ä—è—Ç—å –≤—Ä–µ–º—è –ª–æ–∫–∞–ª—å–Ω–æ", "rarity": "rare", "image_url": "/images/time_manipulator.jpg"},
            
            # –≠–ø–∏—á–µ—Å–∫–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
            {"title": "–ó–≤–µ–∑–¥–Ω—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å", "description": "–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –º–µ–∂–¥—É –≥–∞–ª–∞–∫—Ç–∏–∫–∞–º–∏", "rarity": "epic", "image_url": "/images/stellar_engine.jpg"},
            {"title": "–ü–ª–∞–Ω–µ—Ç–∞—Ä–Ω—ã–π —â–∏—Ç", "description": "–ó–∞—â–∏—â–∞–µ—Ç —Ü–µ–ª—É—é –ø–ª–∞–Ω–µ—Ç—É –æ—Ç –∞—Ç–∞–∫", "rarity": "epic", "image_url": "/images/planetary_shield.jpg"},
            {"title": "–ú–∞—Ç—Ä–∏—Ü–∞ —Å–æ–∑–Ω–∞–Ω–∏—è", "description": "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é", "rarity": "epic", "image_url": "/images/consciousness_matrix.jpg"},
            
            # –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
            {"title": "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç –°–æ–∑–¥–∞—Ç–µ–ª–µ–π", "description": "–î—Ä–µ–≤–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏", "rarity": "legendary", "image_url": "/images/creator_artifact.jpg"},
            {"title": "–°–µ—Ä–¥—Ü–µ –ì–∞–ª–∞–∫—Ç–∏–∫–∏", "description": "–ò—Å—Ç–æ—á–Ω–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ –≤—Å–µ–π –≥–∞–ª–∞–∫—Ç–∏–∫–∏", "rarity": "legendary", "image_url": "/images/galaxy_heart.jpg"},
            {"title": "–ö–ª—é—á –æ—Ç –í—Å–µ–ª–µ–Ω–Ω–æ–π", "description": "–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–µ–∫—Ä–µ—Ç–∞–º –º–∏—Ä–æ–∑–¥–∞–Ω–∏—è", "rarity": "legendary", "image_url": "/images/universe_key.jpg"},
        ]
        
        created_count = 0
        for artifact_data in artifacts_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
            existing_artifact = await self.session.execute(
                text("SELECT id FROM artifacts_artifact WHERE title = :title"),
                {"title": artifact_data["title"]}
            )
            if existing_artifact.fetchone() is None:
                artifact = ArtifactModel(
                    title=artifact_data["title"],
                    description=artifact_data["description"],
                    rarity=artifact_data["rarity"],
                    image_url=artifact_data["image_url"]
                )
                self.session.add(artifact)
                created_count += 1
        
        await self.session.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_count} –Ω–æ–≤—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
    
    async def seed_mission_branches(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Å–µ–∑–æ–Ω—ã/–≤–µ—Ç–∫–∏ –º–∏—Å—Å–∏–π"""
        print("üåç –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å–µ–∑–æ–Ω–æ–≤...")
        
        now = datetime.now()
        branches_data = [
            {
                "name": "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ –≤ –∫–æ—Å–º–æ—Å–µ",
                "start_date": now - timedelta(days=30),
                "end_date": now + timedelta(days=30)
            },
            {
                "name": "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ê–ª—å—Ñ–∞-–¶–µ–Ω—Ç–∞–≤—Ä–∞",
                "start_date": now - timedelta(days=15),
                "end_date": now + timedelta(days=45)
            },
            {
                "name": "–í–æ–π–Ω–∞ —Å –ö—Å–µ–Ω–æ–º–æ—Ä—Ñ–∞–º–∏",
                "start_date": now,
                "end_date": now + timedelta(days=60)
            },
            {
                "name": "–î–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏—Å—Å–∏—è",
                "start_date": now + timedelta(days=30),
                "end_date": now + timedelta(days=90)
            },
        ]
        
        created_count = 0
        for branch_data in branches_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å–µ–∑–æ–Ω
            existing_branch = await self.session.execute(
                text("SELECT id FROM missions_branch WHERE name = :name"),
                {"name": branch_data["name"]}
            )
            if existing_branch.fetchone() is None:
                branch = MissionBranchModel(
                    name=branch_data["name"],
                    start_date=branch_data["start_date"],
                    end_date=branch_data["end_date"]
                )
                self.session.add(branch)
                created_count += 1
        
        await self.session.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_count} –Ω–æ–≤—ã—Ö —Å–µ–∑–æ–Ω–æ–≤")
    
    async def seed_tasks(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏"""
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á...")
        
        tasks_data = [
            # –ë–∞–∑–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            {"title": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—ã –∫–æ—Ä–∞–±–ª—è", "description": "–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"},
            {"title": "–ó–∞–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ø–ª–∏–≤–Ω—ã–µ –±–∞–∫–∏", "description": "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ø–ª–∏–≤–Ω—ã–µ –±–∞–∫–∏ –¥–æ –º–∞–∫—Å–∏–º—É–º–∞"},
            {"title": "–ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π", "description": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–∏–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"},
            {"title": "–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º", "description": "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–ª–µ—Ç–∞"},
            
            # –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
            {"title": "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞—Å—Ç–µ—Ä–æ–∏–¥–Ω–æ–µ –ø–æ–ª–µ", "description": "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤"},
            {"title": "–°–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑—Ü—ã —Å –ø–ª–∞–Ω–µ—Ç—ã", "description": "–î–æ–±—ã—Ç—å –æ–±—Ä–∞–∑—Ü—ã –≥—Ä—É–Ω—Ç–∞ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã"},
            {"title": "–ò–∑—É—á–∏—Ç—å –∞–Ω–æ–º–∞–ª–∏—é", "description": "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–µ —è–≤–ª–µ–Ω–∏–µ"},
            {"title": "–ö–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É", "description": "–°–æ–∑–¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∫–∞—Ä—Ç—É –∑–≤–µ–∑–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"},
            
            # –ë–æ–µ–≤—ã–µ –∑–∞–¥–∞—á–∏
            {"title": "–£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –ø–∏—Ä–∞—Ç—Å–∫—É—é –±–∞–∑—É", "description": "–õ–∏–∫–≤–∏–¥–∏—Ä–æ–≤–∞—Ç—å —É–≥—Ä–æ–∑—É –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –ø–∏—Ä–∞—Ç–æ–≤"},
            {"title": "–ó–∞—â–∏—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π –∫–æ–Ω–≤–æ–π", "description": "–û–±–µ—Å–ø–µ—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤—ã—Ö –∫–æ—Ä–∞–±–ª–µ–π"},
            {"title": "–ü–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å –≤—Ä–∞–∂–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å", "description": "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –≤—Ä–∞–∂–µ—Å–∫–æ–µ —Å—É–¥–Ω–æ"},
            {"title": "–û–±–æ—Ä–æ–Ω—è—Ç—å —Å—Ç–∞–Ω—Ü–∏—é", "description": "–ó–∞—â–∏—Ç–∏—Ç—å –∫–æ—Å–º–∏—á–µ—Å–∫—É—é —Å—Ç–∞–Ω—Ü–∏—é –æ—Ç –∞—Ç–∞–∫"},
            
            # –î–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
            {"title": "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Å –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–∞–º–∏", "description": "–ù–∞–ª–∞–¥–∏—Ç—å –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è"},
            {"title": "–ü—Ä–æ–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã –æ –º–∏—Ä–µ", "description": "–î–æ—Å—Ç–∏—á—å –º–∏—Ä–Ω–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –º–µ–∂–¥—É —Ñ—Ä–∞–∫—Ü–∏—è–º–∏"},
            {"title": "–û–±–º–µ–Ω—è—Ç—å—Å—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏", "description": "–ü—Ä–æ–≤–µ—Å—Ç–∏ –æ–±–º–µ–Ω –Ω–∞—É—á–Ω—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏"},
            {"title": "–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π –¥–æ–≥–æ–≤–æ—Ä", "description": "–ó–∞–∫–ª—é—á–∏—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ —Ç–æ—Ä–≥–æ–≤–ª–µ"},
        ]
        
        created_count = 0
        for task_data in tasks_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–¥–∞—á–∞
            existing_task = await self.session.execute(
                text("SELECT id FROM missions_mission_task WHERE title = :title"),
                {"title": task_data["title"]}
            )
            if existing_task.fetchone() is None:
                task = MissionTaskModel(
                    title=task_data["title"],
                    description=task_data["description"]
                )
                self.session.add(task)
                created_count += 1
        
        await self.session.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_count} –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á")
    
    async def seed_missions(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ –º–∏—Å—Å–∏–∏"""
        print("üéØ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –º–∏—Å—Å–∏–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        branches = await self.session.execute(text("SELECT id FROM missions_branch ORDER BY id"))
        branch_ids = [row[0] for row in branches.fetchall()]
        
        competencies = await self.session.execute(text("SELECT id FROM competencies_competency ORDER BY id"))
        competency_ids = [row[0] for row in competencies.fetchall()]
        
        skills = await self.session.execute(text("SELECT id FROM skills_skill ORDER BY id"))
        skill_ids = [row[0] for row in skills.fetchall()]
        
        artifacts = await self.session.execute(text("SELECT id FROM artifacts_artifact ORDER BY id"))
        artifact_ids = [row[0] for row in artifacts.fetchall()]
        
        tasks = await self.session.execute(text("SELECT id FROM missions_mission_task ORDER BY id"))
        task_ids = [row[0] for row in tasks.fetchall()]
        
        missions_data = [
            {
                "title": "–ü–µ—Ä–≤—ã–π –ø–æ–ª–µ—Ç",
                "description": "–í–∞—à–∞ –ø–µ—Ä–≤–∞—è –º–∏—Å—Å–∏—è –≤ –∫–æ—Å–º–æ—Å–µ. –ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã –ø–∏–ª–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
                "reward_xp": 50,
                "reward_mana": 25,
                "rank_requirement": 1,
                "category": MissionCategoryEnum.QUEST,
                "branch_id": branch_ids[0] if branch_ids else 1,
                "competency_rewards": [{"competency_id": competency_ids[0], "level_increase": 1}],
                "skill_rewards": [{"skill_id": skill_ids[0], "level_increase": 1}],
                "artifact_rewards": [artifact_ids[0]] if artifact_ids else [],
                "task_ids": task_ids[:2] if len(task_ids) >= 2 else [],
            },
            {
                "title": "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ê–ª—å—Ñ–∞-–¶–µ–Ω—Ç–∞–≤—Ä–∞",
                "description": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º—É –ê–ª—å—Ñ–∞-–¶–µ–Ω—Ç–∞–≤—Ä–∞ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –º–∏—Ä–æ–≤.",
                "reward_xp": 150,
                "reward_mana": 75,
                "rank_requirement": 2,
                "category": MissionCategoryEnum.SIMULATOR,
                "branch_id": branch_ids[1] if len(branch_ids) > 1 else branch_ids[0],
                "competency_rewards": [
                    {"competency_id": competency_ids[1], "level_increase": 2},
                    {"competency_id": competency_ids[5], "level_increase": 1}
                ],
                "skill_rewards": [
                    {"skill_id": skill_ids[4], "level_increase": 1},
                    {"skill_id": skill_ids[20], "level_increase": 1}
                ],
                "artifact_rewards": [artifact_ids[1]] if len(artifact_ids) > 1 else [],
                "task_ids": task_ids[4:8] if len(task_ids) >= 8 else [],
            },
            {
                "title": "–ë–∏—Ç–≤–∞ –∑–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ",
                "description": "–ó–∞—â–∏—Ç–∏—Ç–µ –∫–æ–ª–æ–Ω–∏—é –æ—Ç –Ω–∞–ø–∞–¥–µ–Ω–∏—è –ö—Å–µ–Ω–æ–º–æ—Ä—Ñ–æ–≤.",
                "reward_xp": 300,
                "reward_mana": 150,
                "rank_requirement": 3,
                "category": MissionCategoryEnum.QUEST,
                "branch_id": branch_ids[2] if len(branch_ids) > 2 else branch_ids[0],
                "competency_rewards": [
                    {"competency_id": competency_ids[3], "level_increase": 2},
                    {"competency_id": competency_ids[7], "level_increase": 1}
                ],
                "skill_rewards": [
                    {"skill_id": skill_ids[12], "level_increase": 2},
                    {"skill_id": skill_ids[15], "level_increase": 1}
                ],
                "artifact_rewards": [artifact_ids[2]] if len(artifact_ids) > 2 else [],
                "task_ids": task_ids[8:12] if len(task_ids) >= 12 else [],
            },
            {
                "title": "–î–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏—Å—Å–∏—è",
                "description": "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–∏—Ä–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –Ω–æ–≤–æ–π –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç–Ω–æ–π —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–µ–π.",
                "reward_xp": 200,
                "reward_mana": 100,
                "rank_requirement": 4,
                "category": MissionCategoryEnum.QUEST,
                "branch_id": branch_ids[3] if len(branch_ids) > 3 else branch_ids[0],
                "competency_rewards": [
                    {"competency_id": competency_ids[4], "level_increase": 2},
                    {"competency_id": competency_ids[6], "level_increase": 1}
                ],
                "skill_rewards": [
                    {"skill_id": skill_ids[16], "level_increase": 2},
                    {"skill_id": skill_ids[24], "level_increase": 1}
                ],
                "artifact_rewards": [artifact_ids[3]] if len(artifact_ids) > 3 else [],
                "task_ids": task_ids[12:16] if len(task_ids) >= 16 else [],
            },
        ]
        
        created_count = 0
        for mission_data in missions_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –º–∏—Å—Å–∏—è
            existing_mission = await self.session.execute(
                text("SELECT id FROM missions_mission WHERE title = :title"),
                {"title": mission_data["title"]}
            )
            if existing_mission.fetchone() is None:
                mission = MissionModel(
                    title=mission_data["title"],
                    description=mission_data["description"],
                    reward_xp=mission_data["reward_xp"],
                    reward_mana=mission_data["reward_mana"],
                    rank_requirement=mission_data["rank_requirement"],
                    category=mission_data["category"],
                    branch_id=mission_data["branch_id"]
                )
                self.session.add(mission)
                await self.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –º–∏—Å—Å–∏–∏
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
                for comp_reward in mission_data["competency_rewards"]:
                    comp_reward_model = MissionCompetencyRewardModel(
                        mission_id=mission.id,
                        competency_id=comp_reward["competency_id"],
                        level_increase=comp_reward["level_increase"]
                    )
                    self.session.add(comp_reward_model)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –Ω–∞–≤—ã–∫–æ–≤
                for skill_reward in mission_data["skill_rewards"]:
                    skill_reward_model = MissionSkillRewardModel(
                        mission_id=mission.id,
                        skill_id=skill_reward["skill_id"],
                        level_increase=skill_reward["level_increase"]
                    )
                    self.session.add(skill_reward_model)
                
                created_count += 1
        
        await self.session.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_count} –Ω–æ–≤—ã—Ö –º–∏—Å—Å–∏–π")
    
    async def seed_store_items(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞"""
        print("üõí –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞...")
        
        store_items_data = [
            {"title": "–¢–æ–ø–ª–∏–≤–æ –¥–ª—è –∫–æ—Ä–∞–±–ª—è", "price": 100, "stock": 1000},
            {"title": "–†–µ–º–æ–Ω—Ç–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç", "price": 250, "stock": 500},
            {"title": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏", "price": 150, "stock": 800},
            {"title": "–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —á–∏–ø—ã", "price": 300, "stock": 200},
            {"title": "–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —è—á–µ–π–∫–∏", "price": 200, "stock": 600},
            {"title": "–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –µ–¥–∞", "price": 50, "stock": 2000},
            {"title": "–°–∫–∞–Ω–µ—Ä –¥–∞–ª—å–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", "price": 500, "stock": 100},
            {"title": "–©–∏—Ç–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä", "price": 750, "stock": 50},
            {"title": "–ì–∏–ø–µ—Ä–¥–≤–∏–≥–∞—Ç–µ–ª—å", "price": 2000, "stock": 25},
            {"title": "–ö–≤–∞–Ω—Ç–æ–≤—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä", "price": 5000, "stock": 10},
        ]
        
        created_count = 0
        for item_data in store_items_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä
            existing_item = await self.session.execute(
                text("SELECT id FROM store_item WHERE title = :title"),
                {"title": item_data["title"]}
            )
            if existing_item.fetchone() is None:
                item = StoreItemModel(
                    title=item_data["title"],
                    price=item_data["price"],
                    stock=item_data["stock"]
                )
                self.session.add(item)
                created_count += 1
        
        await self.session.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_count} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞")
    
    async def seed_admin_user(self):
        """–°–æ–∑–¥–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã"""
        print("üë§ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        existing_admin = await self.session.execute(
            text("SELECT login FROM users_user WHERE login = :login"),
            {"login": "admin"}
        )
        if existing_admin.fetchone() is None:
            admin_user = UserModel(
                login="admin",
                password=UserPasswordService().generate_password_hash("admin123"),  # password: admin123
                role=UserRoleEnum.HR,
                rank_id=1,  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–Ω–≥–æ–≤
                exp=0,
                mana=100,
                first_name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                last_name="–°–∏—Å—Ç–µ–º—ã"
            )
            self.session.add(admin_user)
            await self.session.commit()
            print("‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã (–ª–æ–≥–∏–Ω: admin, –ø–∞—Ä–æ–ª—å: admin123)")
        else:
            print("‚ÑπÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    async def run_seed(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π —Ç–µ–º–∞—Ç–∏–∫–æ–π...")
        
        try:
            await self.create_session()
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            await self.seed_ranks()
            await self.seed_competencies()
            await self.seed_skills()
            await self.seed_artifacts()
            await self.seed_mission_branches()
            await self.seed_tasks()
            await self.seed_missions()
            await self.seed_store_items()
            await self.seed_admin_user()
            
            print("\nüéâ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            print("üåå –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –≤—Å–µ–ª–µ–Ω–Ω–∞—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            await self.session.rollback()
            raise
        finally:
            await self.close_session()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞"""
    seeder = SpaceSeedData()
    await seeder.run_seed()


if __name__ == "__main__":
    asyncio.run(main())
