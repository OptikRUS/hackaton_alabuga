import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

revision = "0016"
down_revision = "0015"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "missions_dependencies",
        sa.Column("mission_id", sa.Integer(), nullable=False),
        sa.Column("prerequisite_mission_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["mission_id"], ["missions_mission.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["prerequisite_mission_id"], ["missions_mission.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint(
            "mission_id", "prerequisite_mission_id", name="pk_missions_dependencies"
        ),
        sa.UniqueConstraint(
            "mission_id", "prerequisite_mission_id", name="uq_missions_dependencies"
        ),
    )
    op.alter_column(
        "missions_branch",
        "start_date",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
    )
    op.alter_column(
        "missions_branch",
        "end_date",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "missions_branch",
        "end_date",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.alter_column(
        "missions_branch",
        "start_date",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.drop_table("missions_dependencies")
    # ### end Alembic commands ###
