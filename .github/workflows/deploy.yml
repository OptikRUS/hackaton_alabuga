name: Deploy

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy docker-compose.yml to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          port: ${{ secrets.SERVER_PORT }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
          source: "docker-compose.yaml"          # ‚Üê –±–µ—Ä—ë–º –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
          target: "/tmp/docker-compose.yaml"     # ‚Üê –∫–ª–∞–¥—ë–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É

      - name: Deploy on VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # –†–∞–±–æ—Ç–∞–µ–º —Å–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞—ë—Ç—Å—è "–Ω–∞–≤—Å–µ–≥–¥–∞"
            COMPOSE_FILE="/tmp/docker-compose.yaml"

            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            export DOCKER_API_IMAGE=${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_REPONAME }}:latest
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}

            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤–æ–µ
            docker compose -f "$COMPOSE_FILE" --profile api up -d --build

            sleep 10
            docker compose -f "$COMPOSE_FILE" ps

            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
            rm -f "$COMPOSE_FILE"

#      - name: Stop and clean up
#        if: always()
#        run: docker compose down --volumes --remove-orphans

#jobs:
#  deploy:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Deploy via SSH
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.SERVER_HOST }}
#          port: ${{ secrets.SERVER_PORT }}
#          username: ${{ secrets.SERVER_USERNAME }}
#          password: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
#          script: |
#            set -e
#
#            HEALTHCHECK_RETRIES=10
#            HEALTHCHECK_DELAY=10
#
#            echo "üöÄ –õ–æ–≥–∏–Ω –≤ Docker Hub..."
#            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ vars.DOCKERHUB_USERNAME }}" --password-stdin
#
#            echo "üì• –°–∫–∞—á–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑..."
#            docker image pull ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_REPONAME }}:latest
#
#            echo "üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è healthcheck..."
#            docker container run -d \
#              --name ${{ vars.DOCKERHUB_REPONAME }}_new \
#              --label app=${{ vars.DOCKERHUB_REPONAME }} \
#              -e TZ=Europe/Moscow \
#              -p 8081:8080 \
#              -e DB_NAME=${{ secrets.DB_NAME }} \
#              -e DB_USER=${{ secrets.DB_USER }} \
#              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
#              -e DB_HOST=${{ secrets.DB_HOST }} \
#              -e DB_PORT=${{ secrets.DB_PORT }} \
#              -e MINIO_ENDPOINT=${{ secrets.MINIO_ENDPOINT }} \
#              -e SERVER_HOST=${{ secrets.SERVER_HOST }} \
#              ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_REPONAME }}
#
#            echo "‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º healthcheck –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
#            success=false
#            for i in $(seq 1 $HEALTHCHECK_RETRIES); do
#              if curl -sSf http://localhost:8081/health > /dev/null; then
#                echo "‚úÖ Healthcheck passed!"
#                success=true
#                break
#              else
#                echo "‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ $i –Ω–µ—É–¥–∞—á–Ω–∞, –∂–¥—ë–º $HEALTHCHECK_DELAY —Å–µ–∫..."
#                sleep $HEALTHCHECK_DELAY
#              fi
#            done
#
#            if [ "$success" = true ]; then
#              echo "üóë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
#              docker container stop ${{ vars.DOCKERHUB_REPONAME }} || true
#              docker container rm ${{ vars.DOCKERHUB_REPONAME }} || true
#
#              echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 80..."
#              docker container stop ${{ vars.DOCKERHUB_REPONAME }}_new || true
#              docker container rm ${{ vars.DOCKERHUB_REPONAME }}_new || true
#              docker container run -d \
#                --name ${{ vars.DOCKERHUB_REPONAME }} \
#                --label app=${{ vars.DOCKERHUB_REPONAME }} \
#                -e TZ=Europe/Moscow \
#                -p 80:8080 \
#                -e DB_NAME=${{ secrets.DB_NAME }} \
#                -e DB_USER=${{ secrets.DB_USER }} \
#                -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
#                -e DB_HOST=${{ secrets.DB_HOST }} \
#                -e DB_PORT=${{ secrets.DB_PORT }} \
#                -e MINIO_ENDPOINT=${{ secrets.MINIO_ENDPOINT }} \
#                -e SERVER_HOST=${{ secrets.SERVER_HOST }} \
#                ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_REPONAME }}
#
#              echo "üßπ –ß–∏—Å—Ç–∏–º dangling images..."
#              docker image prune -f
#
#              echo "‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!"
#              echo "‚è≥ –ñ–¥—ë–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–Ω—è—Ç–∏–µ–º –ª–æ–≥–æ–≤..."
#              sleep 10
#              echo "üìã –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:"
#              docker logs ${{ vars.DOCKERHUB_REPONAME }}
#
#            else
#              echo "‚ùå Healthcheck –Ω–µ –ø—Ä–æ—à—ë–ª! –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω."
#              echo "‚è≥ –ñ–¥—ë–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–Ω—è—Ç–∏–µ–º –ª–æ–≥–æ–≤..."
#              sleep 10
#              echo "üìã –õ–æ–≥–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:"
#              docker logs ${{ vars.DOCKERHUB_REPONAME }}_new
#
#              echo "üßπ –£–¥–∞–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ä–∞–±–æ—Ç–∞—Ç—å..."
#              docker container stop ${{ vars.DOCKERHUB_REPONAME }}_new || true
#              docker container rm ${{ vars.DOCKERHUB_REPONAME }}_new || true
#
#              if ! docker ps --filter "name=${{ vars.DOCKERHUB_REPONAME }}" --format '{{.Names}}' | grep -q ${{ vars.DOCKERHUB_REPONAME }}; then
#                echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
#                docker container start ${{ vars.DOCKERHUB_REPONAME }} || true
#              fi
#
#              exit 1
#            fi